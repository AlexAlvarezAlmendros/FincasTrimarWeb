/**
 * Migraci√≥n: A√±adir campos de contacto
 * Fecha: 2024
 * 
 * A√±ade los siguientes campos a la tabla Vivienda:
 * - TelefonoContacto: Tel√©fono del contacto/propietario
 * - NombreContacto: Nombre del contacto/propietario
 * - UrlReferencia: URL del anuncio original o referencia externa
 */

import { db } from '../client.js';
import { logger } from '../../utils/logger.js';

export const up = async () => {
  try {
    logger.info('üîÑ Iniciando migraci√≥n: A√±adir campos de contacto...');

    // A√±adir campo TelefonoContacto
    try {
      await db.execute({
        sql: 'ALTER TABLE Vivienda ADD COLUMN TelefonoContacto TEXT',
        args: []
      });
      logger.info('‚úÖ Campo TelefonoContacto a√±adido exitosamente');
    } catch (error) {
      if (error.message.includes('duplicate column name')) {
        logger.warn('‚ö†Ô∏è Campo TelefonoContacto ya existe, saltando...');
      } else {
        throw error;
      }
    }

    // A√±adir campo NombreContacto
    try {
      await db.execute({
        sql: 'ALTER TABLE Vivienda ADD COLUMN NombreContacto TEXT',
        args: []
      });
      logger.info('‚úÖ Campo NombreContacto a√±adido exitosamente');
    } catch (error) {
      if (error.message.includes('duplicate column name')) {
        logger.warn('‚ö†Ô∏è Campo NombreContacto ya existe, saltando...');
      } else {
        throw error;
      }
    }

    // A√±adir campo UrlReferencia
    try {
      await db.execute({
        sql: 'ALTER TABLE Vivienda ADD COLUMN UrlReferencia TEXT',
        args: []
      });
      logger.info('‚úÖ Campo UrlReferencia a√±adido exitosamente');
    } catch (error) {
      if (error.message.includes('duplicate column name')) {
        logger.warn('‚ö†Ô∏è Campo UrlReferencia ya existe, saltando...');
      } else {
        throw error;
      }
    }

    // Crear √≠ndice para b√∫squedas por tel√©fono de contacto (√∫til para evitar duplicados)
    try {
      await db.execute({
        sql: 'CREATE INDEX IF NOT EXISTS IDX_Vivienda_TelefonoContacto ON Vivienda(TelefonoContacto)',
        args: []
      });
      logger.info('‚úÖ √çndice IDX_Vivienda_TelefonoContacto creado');
    } catch (error) {
      logger.warn('‚ö†Ô∏è Error creando √≠ndice (puede ya existir):', error.message);
    }

    logger.info('‚úÖ Migraci√≥n completada exitosamente: campos de contacto a√±adidos');

  } catch (error) {
    logger.error('‚ùå Error en migraci√≥n de campos de contacto:', error);
    throw error;
  }
};

export const down = async () => {
  try {
    logger.info('üîÑ Revirtiendo migraci√≥n: Eliminar √≠ndice de contacto...');
    
    // Eliminar √≠ndice (SQLite no soporta DROP COLUMN directamente)
    try {
      await db.execute({
        sql: 'DROP INDEX IF EXISTS IDX_Vivienda_TelefonoContacto',
        args: []
      });
      logger.info('‚úÖ √çndice IDX_Vivienda_TelefonoContacto eliminado');
    } catch (error) {
      logger.warn('‚ö†Ô∏è Error eliminando √≠ndice:', error.message);
    }

    logger.info('‚ö†Ô∏è Migraci√≥n revertida parcialmente (solo √≠ndice). Los campos TelefonoContacto, NombreContacto y UrlReferencia siguen en la tabla.');
    logger.info('‚ÑπÔ∏è Para eliminar completamente las columnas, se requerir√≠a recrear la tabla completa.');

  } catch (error) {
    logger.error('‚ùå Error revirtiendo migraci√≥n:', error);
    throw error;
  }
};
